{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/Yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/Coding.png","path":"img/Coding.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/Quora.png","path":"img/Quora.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/niconico.png","path":"img/niconico.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/博客园.png","path":"img/博客园.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/知乎.png","path":"img/知乎.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/简书.png","path":"img/简书.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/Yelee/.gitignore","hash":"79b4a9ac435bc5833a0bc461ebacb10908b34ed3","modified":1486457173353},{"_id":"themes/Yelee/README.md","hash":"12bc9cdb68f51df81bcc36a5263e0a6c5860f646","modified":1486457173354},{"_id":"themes/Yelee/_config.yml","hash":"2ab575e058d4309a91b84c6cdcac4e9fd27392d3","modified":1487320888799},{"_id":"themes/Yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1486457173368},{"_id":"source/404/index.md","hash":"f871d131c3c0724183e11ed82b439e8691313664","modified":1486458374311},{"_id":"source/_posts/hello-world.md","hash":"33673113abe5223d23c58837b0f6a64b58c47e46","modified":1486711968394},{"_id":"source/_posts/javascript内容.md","hash":"870266280e5ac65eb62bd9e41bac868efbb6d6d3","modified":1486628105440},{"_id":"source/about/index.md","hash":"31436f97117a9e4dbce011be25be0dd3e4447037","modified":1486458248695},{"_id":"themes/Yelee/.git/FETCH_HEAD","hash":"e916aa588361a657c380988cbf17a455263b1825","modified":1486457479033},{"_id":"source/tags/index.md","hash":"bcd75a8c855aa21d97dd189e18abe5a1ff74efd3","modified":1486459610671},{"_id":"themes/Yelee/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1486457173294},{"_id":"themes/Yelee/.git/ORIG_HEAD","hash":"a098c9ba7d644627d0ba7fb675f0168faedeb258","modified":1486457479200},{"_id":"themes/Yelee/.git/config","hash":"fc9762f33cf36a22baab4720f661eeaa651e1c24","modified":1486457173307},{"_id":"themes/Yelee/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1486456645208},{"_id":"themes/Yelee/.git/index","hash":"f682958ce077173943ae2eba6cb80e52c9ea3a99","modified":1486457173406},{"_id":"themes/Yelee/.git/packed-refs","hash":"fad6a43ad617793304d9241562a71596db559018","modified":1486457173290},{"_id":"themes/Yelee/.github/ISSUE_TEMPLATE.md","hash":"ce083abf397c12747893a23e901d46558b53e0ad","modified":1486457173353},{"_id":"themes/Yelee/languages/default.yml","hash":"3bdad891c90029447b4fbaedbbb11b8a59d06418","modified":1486457173355},{"_id":"themes/Yelee/languages/en.yml","hash":"ff991c2c80d9ab69c984acb1c40480c8b98be2bc","modified":1486457173355},{"_id":"themes/Yelee/languages/zh-Hans.yml","hash":"4fa4068a65089810e7dd95692f9157eb80c2e8de","modified":1486457173355},{"_id":"themes/Yelee/languages/zh-Hant-HK.yml","hash":"bbc73dcd9170fe9efaab6fbbe1571886e0b8aa89","modified":1486457173355},{"_id":"themes/Yelee/languages/zh-Hant-TW.yml","hash":"88b4678bba940bc270c7aea2debbf869ecf6cc18","modified":1486457173356},{"_id":"themes/Yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1486457173366},{"_id":"themes/Yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1486457173366},{"_id":"themes/Yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1486457173366},{"_id":"themes/Yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1486457173367},{"_id":"themes/Yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1486457173367},{"_id":"themes/Yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1486457173368},{"_id":"themes/Yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1486457173367},{"_id":"themes/Yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1486457173368},{"_id":"themes/Yelee/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1486456645213},{"_id":"themes/Yelee/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1486456645219},{"_id":"themes/Yelee/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1486456645219},{"_id":"themes/Yelee/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1486456645219},{"_id":"themes/Yelee/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1486456645220},{"_id":"themes/Yelee/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1486456645236},{"_id":"themes/Yelee/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1486456645237},{"_id":"themes/Yelee/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1486456645232},{"_id":"themes/Yelee/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1486456645244},{"_id":"themes/Yelee/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1486456645237},{"_id":"themes/Yelee/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1486456645245},{"_id":"themes/Yelee/.git/logs/HEAD","hash":"3ab603b8135c8291b1e72378cbccd6cdb20eb1c0","modified":1486457173304},{"_id":"themes/Yelee/layout/_partial/after-footer.ejs","hash":"748391b89b661fa1ed7da0b15ed6870981ec4dc3","modified":1486457173356},{"_id":"themes/Yelee/layout/_partial/article.ejs","hash":"afd85b362d732fa9b439af7dc44b657d0d1aae3d","modified":1486457173357},{"_id":"themes/Yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1486457173357},{"_id":"themes/Yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1486457173357},{"_id":"themes/Yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1486457173358},{"_id":"themes/Yelee/layout/_partial/footer.ejs","hash":"82653e3bbdc605b51e1b0a36e30f3ac1180c838e","modified":1486457173360},{"_id":"themes/Yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1486457173360},{"_id":"themes/Yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1486457173361},{"_id":"themes/Yelee/layout/_partial/ie-updater.ejs","hash":"8d1e1f3953efbcf5ec84a451439a62a1c95b55d7","modified":1486457173361},{"_id":"themes/Yelee/layout/_partial/left-col.ejs","hash":"90fd7c763faf8d64d58612f592cbacbefdaea161","modified":1486457173362},{"_id":"themes/Yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1486457173362},{"_id":"themes/Yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1486457173362},{"_id":"themes/Yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1486457173363},{"_id":"themes/Yelee/layout/_partial/head.ejs","hash":"55e90c3d5de6d7ffcfe26c4dc22189a7a27b6651","modified":1486457173361},{"_id":"themes/Yelee/layout/_partial/open-in-new-tab.ejs","hash":"a59d4c768009dd621e741a29cf6446ebc2668fe9","modified":1486457173362},{"_id":"themes/Yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1486457173363},{"_id":"themes/Yelee/layout/_partial/tab-title-change.ejs","hash":"7c4a7177e0c77de2d7607ca29fc395abebd34db7","modified":1486457173365},{"_id":"themes/Yelee/layout/_partial/tag-cloud-page.ejs","hash":"c7b25ef136e129c948ac37d6ff19e8815ab9fee6","modified":1486457173365},{"_id":"themes/Yelee/layout/_partial/toc.ejs","hash":"7ee88b1a98eea5cbd44c0f9a11b86b46aa2d6752","modified":1486457173365},{"_id":"themes/Yelee/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1486457173365},{"_id":"themes/Yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1486457173376},{"_id":"themes/Yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1486457173379},{"_id":"themes/Yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1486457173378},{"_id":"themes/Yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1486457173381},{"_id":"themes/Yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1486457173385},{"_id":"themes/Yelee/source/css/style.styl","hash":"b285f9a75abd09c7d06fe89e70f9e1819eac27dd","modified":1486457173396},{"_id":"themes/Yelee/source/css/_variables.styl","hash":"f429eb9bc9f0a270ec68c4f4c63903250746a01c","modified":1486457173396},{"_id":"themes/Yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1486457173397},{"_id":"themes/Yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1486457173397},{"_id":"themes/Yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1486457173397},{"_id":"themes/Yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1486457173398},{"_id":"themes/Yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1486457173398},{"_id":"themes/Yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1486457173398},{"_id":"themes/Yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1486457173399},{"_id":"themes/Yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1486457173399},{"_id":"themes/Yelee/source/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1486457173399},{"_id":"themes/Yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1486457173399},{"_id":"themes/Yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1486457173400},{"_id":"themes/Yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1486457173400},{"_id":"themes/Yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1486457173400},{"_id":"themes/Yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1486457173400},{"_id":"themes/Yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1486457173401},{"_id":"themes/Yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1486457173401},{"_id":"themes/Yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1486457173401},{"_id":"themes/Yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1486457173402},{"_id":"themes/Yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1486457173401},{"_id":"themes/Yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1486457173402},{"_id":"themes/Yelee/source/js/GithubRepoWidget.js","hash":"5fb1bf6cf973062771ddf275ceeca5bc69c81c77","modified":1486457173403},{"_id":"themes/Yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1486457173403},{"_id":"themes/Yelee/source/js/main.js","hash":"369774a7ff45a2e5117a796330a04aeb50a61fdf","modified":1486457173404},{"_id":"themes/Yelee/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1486457173404},{"_id":"themes/Yelee/source/js/search.js","hash":"001e324844e63f3bfb6f60d173b9c6954127be0b","modified":1486457173405},{"_id":"themes/Yelee/source/js/toc.js","hash":"973c1a4e2c9de8f4f662b99623027658fe6d94c2","modified":1486457173405},{"_id":"themes/Yelee/source/js/pc.js","hash":"bc289c5dc610e2a34d308daeb9adea96d01f7788","modified":1486457173404},{"_id":"themes/Yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1486457173383},{"_id":"themes/Yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1486457173385},{"_id":"themes/Yelee/source/img/avatar.jpg","hash":"f0cb5affc1178f9b9dee59c5ce2836df4bf9145d","modified":1486436807723},{"_id":"themes/Yelee/.git/refs/heads/master","hash":"a098c9ba7d644627d0ba7fb675f0168faedeb258","modified":1486457173303},{"_id":"themes/Yelee/layout/_partial/comments/click2show.ejs","hash":"ecc4d3ca997c6fd127e00fa2edf0158b925d1d3e","modified":1486457173358},{"_id":"themes/Yelee/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1486457173359},{"_id":"themes/Yelee/layout/_partial/comments/count-comment.ejs","hash":"ada2032e401b73b312c50b75bdbb8ee71d5a291e","modified":1486457173358},{"_id":"themes/Yelee/layout/_partial/comments/duoshuo.ejs","hash":"e7f12f1246a67a5b556c2d5b37dc78733f1cf15a","modified":1486457173359},{"_id":"themes/Yelee/layout/_partial/comments/youyan.ejs","hash":"d150085faee4809ba50f69c55d904605699040cb","modified":1486457173359},{"_id":"themes/Yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1486457173363},{"_id":"themes/Yelee/layout/_partial/post/date.ejs","hash":"329ed372296a86bce73ff8936af5601723fdd70a","modified":1486457173363},{"_id":"themes/Yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1486457173364},{"_id":"themes/Yelee/layout/_partial/post/share.ejs","hash":"58c2db54a9867aaafe68a7f052b04701c7c3df0f","modified":1486457173364},{"_id":"themes/Yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1486457173364},{"_id":"themes/Yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1486457173364},{"_id":"themes/Yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1486457173369},{"_id":"themes/Yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1486457173371},{"_id":"themes/Yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1486457173373},{"_id":"themes/Yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1486457173375},{"_id":"themes/Yelee/source/css/_partial/archive.styl","hash":"102c23dbb6cde3cbfca3b151c742e0d77911186e","modified":1486457173386},{"_id":"themes/Yelee/source/css/_partial/article.styl","hash":"190828c822096bb3098a7d14c3340eb004057aa0","modified":1486457173386},{"_id":"themes/Yelee/source/css/_partial/footer.styl","hash":"a419108f1b820c59fcc56d218bfaaa4ffc4f1d4d","modified":1486457173389},{"_id":"themes/Yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1486457173389},{"_id":"themes/Yelee/source/css/_partial/highlight.styl","hash":"4e34bf9340ce9b15d2d59fc4ea761d1d110927cf","modified":1486457173390},{"_id":"themes/Yelee/source/css/_partial/main.styl","hash":"405db411896f3c7de9e7dd27e58c920fb90b9834","modified":1486457173391},{"_id":"themes/Yelee/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1486457173391},{"_id":"themes/Yelee/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1486457173392},{"_id":"themes/Yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1486457173392},{"_id":"themes/Yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1486457173392},{"_id":"themes/Yelee/source/css/_partial/search.styl","hash":"688ff535a6005be02d947be75d22cfe1f8ce72cd","modified":1486457173393},{"_id":"themes/Yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1486457173393},{"_id":"themes/Yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1486457173390},{"_id":"themes/Yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1486457173394},{"_id":"themes/Yelee/source/css/_partial/toc.styl","hash":"8f2a057dc072285093e37f1f645e9cb53608642f","modified":1486457173394},{"_id":"themes/Yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1486457173394},{"_id":"themes/Yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1486457173395},{"_id":"themes/Yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1486457173395},{"_id":"themes/Yelee/.git/objects/pack/pack-04b0c9b16aeeae750803f3a74d97317d12b32d72.idx","hash":"dec2587b5d1a6b900cc3f76ffed3a741bfb83666","modified":1486457173016},{"_id":"themes/Yelee/.git/logs/refs/heads/master","hash":"3ab603b8135c8291b1e72378cbccd6cdb20eb1c0","modified":1486457173304},{"_id":"themes/Yelee/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1486457173293},{"_id":"themes/Yelee/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1486457173387},{"_id":"themes/Yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1486457173387},{"_id":"themes/Yelee/source/css/_partial/customise/heading.styl","hash":"c29799f09ebd87767fd9cc3b1fa795db44a94670","modified":1486457173388},{"_id":"themes/Yelee/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1486457173388},{"_id":"themes/Yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1486457173388},{"_id":"themes/Yelee/source/css/_partial/customise/list.styl","hash":"7db683e2837a078ad7817fb88914535588e49cfa","modified":1486457173388},{"_id":"themes/Yelee/source/css/_partial/customise/social-icon.styl","hash":"bfa5c863d474266f32a570e34a0effda964f7f40","modified":1486457173389},{"_id":"themes/Yelee/.git/logs/refs/remotes/origin/HEAD","hash":"3ab603b8135c8291b1e72378cbccd6cdb20eb1c0","modified":1486457173293},{"_id":"themes/Yelee/.git/objects/pack/pack-04b0c9b16aeeae750803f3a74d97317d12b32d72.pack","hash":"463d3c260229628ab785c33135b1d5b76b23ee66","modified":1486457173076},{"_id":"public/about/index.html","hash":"e99083fbcd4bf26efdca5a7295f70d30b74afb25","modified":1487643457852},{"_id":"public/404.html","hash":"1e36384a069a5670ab085b50473c1d0aced8b619","modified":1487643457891},{"_id":"public/archives/index.html","hash":"0123690772a53744fee22ac361588db98564919f","modified":1487643457892},{"_id":"public/archives/2017/index.html","hash":"c7a1d467cf0d6765b8e8ca25d28bd403edabae99","modified":1487643457892},{"_id":"public/index.html","hash":"a429c7519f62e72b348409de7d8858e5cc311e54","modified":1487643457893},{"_id":"public/archives/2017/02/index.html","hash":"26b44bfbac3d0571a883816e14dc25555bdd30aa","modified":1487643457893},{"_id":"public/2017/02/09/javascript内容/index.html","hash":"79c53e49b1657faaf907a95ef7fdb9cd2177a587","modified":1487643457893},{"_id":"public/2017/02/07/hello-world/index.html","hash":"bbbf807daa528dd8bd1d43182412acdbf2cbfac4","modified":1487643457893},{"_id":"public/tags/Mrakdown语法/index.html","hash":"e4b033d34d1385163d2bce53fa589705b65d91ad","modified":1487643457902},{"_id":"public/tags/函数/index.html","hash":"1525f587539402e99b7e501ce6aa12844fc8fc27","modified":1487643457902},{"_id":"public/tags/JavaScript/index.html","hash":"52cacf412cb19dd9eeb4faaee23b7437a6074610","modified":1487643457903},{"_id":"public/tags/Yelee/index.html","hash":"f348567f3e983d0e64bed9ab37abc33ab3b5b911","modified":1487643457903},{"_id":"public/tags/index.html","hash":"6821937c3eabf2bb5d83fd01125d04bfc1612443","modified":1487643457903},{"_id":"public/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1487643457913},{"_id":"public/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1487643457913},{"_id":"public/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1487643457913},{"_id":"public/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1487643457913},{"_id":"public/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1487643457914},{"_id":"public/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1487643457914},{"_id":"public/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1487643457914},{"_id":"public/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1487643457914},{"_id":"public/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1487643457914},{"_id":"public/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1487643457914},{"_id":"public/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1487643457914},{"_id":"public/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1487643457914},{"_id":"public/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1487643457915},{"_id":"public/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1487643457915},{"_id":"public/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1487643457915},{"_id":"public/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1487643457915},{"_id":"public/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1487643457915},{"_id":"public/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1487643457915},{"_id":"public/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1487643457915},{"_id":"public/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1487643457915},{"_id":"public/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1487643457915},{"_id":"public/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1487643457915},{"_id":"public/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1487643457915},{"_id":"public/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1487643457916},{"_id":"public/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1487643457916},{"_id":"public/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1487643457916},{"_id":"public/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1487643457916},{"_id":"public/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1487643457916},{"_id":"public/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1487643457916},{"_id":"public/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1487643461180},{"_id":"public/img/avatar.jpg","hash":"f0cb5affc1178f9b9dee59c5ce2836df4bf9145d","modified":1487643461182},{"_id":"public/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1487643461182},{"_id":"public/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1487643461184},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1487643461184},{"_id":"public/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1487643461185},{"_id":"public/js/main.js","hash":"d58bbc593d94d48e85d4ebfb002910444080cb06","modified":1487643461185},{"_id":"public/js/pc.js","hash":"19a1660b10358046e7a1f398284491519b2ffd47","modified":1487643461185},{"_id":"public/js/mobile.js","hash":"0f4c1fcd6df47a196ed9495c225173402aa7d769","modified":1487643461185},{"_id":"public/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1487643461185},{"_id":"public/css/style.css","hash":"7e1d24c4e060f804c89412e7b4af8bdf8d8cbce5","modified":1487643461185}],"Category":[],"Data":[],"Page":[{"title":"404 Not Found：该页无法显示","toc":false,"comments":0,"_content":"\n","source":"404/index.md","raw":"---\ntitle: 404 Not Found：该页无法显示\ntoc: false\ncomments: false\npermalink: /404\n---\n\n","date":"2017-02-07T09:06:14.311Z","updated":"2017-02-07T09:06:14.311Z","path":"/404.html","layout":"page","_id":"cizewi5zm0000zwi461h3nunn","content":"","excerpt":"","more":""},{"title":"about","date":"2017-02-07T09:03:44.000Z","_content":"#我是小楠楠","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-02-07 17:03:44\n---\n#我是小楠楠","updated":"2017-02-07T09:04:08.695Z","path":"about/index.html","comments":1,"layout":"page","_id":"cizewi5zs0002zwi4pcar20gc","content":"<p>#我是小楠楠</p>\n","excerpt":"","more":"<p>#我是小楠楠</p>\n"},{"title":"tags","date":"2017-02-07T09:02:27.000Z","_content":"你是谁","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-02-07 17:02:27\n---\n你是谁","updated":"2017-02-07T09:26:50.671Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cizewi6010005zwi4basjelrh","content":"<p>你是谁</p>\n","excerpt":"","more":"<p>你是谁</p>\n"}],"Post":[{"title":"Markdown对应Yelee主题的一些语法","date":"2017-02-07T07:08:32.000Z","description":"Welcome to Nannan's blog! This is your very first post.","_content":"<Excerpt in index | 首页摘要>\n<!-- more -->\n<The rest of contents | 余下全文>\n\n# 这是 H1 #\n\n## 这是 H2 ##\n\n### 这是 H3 ######\n\n###### 这是 H6 ######\n\nMarkdown 标记区块引用是使用类似 email 中用 > 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 >\n\n> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\n> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n>\n> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\n> id sem consectetuer libero luctus adipiscing.\n\n区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 > ：\n> This is the first level of quoting.\n>\n> > This is nested blockquote.\n>\n> Back to the first level.\n\n引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：\n\n> ## 这是一个标题。\n>\n> 1.   这是第一行列表项。\n> 2.   这是第二行列表项。\n>\n> 给出一些例子代码：\n>\n>     return shell_exec(\"echo $input | $markdown_script\");\n\n#列表\n\nMarkdown 支持有序列表和无序列表。\n\n无序列表使用星号、加号或是减号作为列表标记：\n\n*   Red\n*   Green\n*   Blue\n等于\n+   Red\n+   Green\n+   Blue\n也等于\n-   Red\n-   Green\n-   Blue\n有序列表则使用数字接着一个英文句点：\n1.  Bird\n2.  McHale\n3.  Parish\n\n很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：\n\n<ol>\n<li>Bird</li>\n<li>McHale</li>\n<li>Parish</li>\n</ol>\n\n列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。\n\n要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：\n\n\n*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\n    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\n    viverra nec, fringilla in, laoreet vitae, risus.\n*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\n    Suspendisse id sem consectetuer libero luctus adipiscing.\n\n*   A list item with a blockquote:\n\n    > This is a blockquote\n    > inside a list item.\n\n你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\n    * * *\n\n    ***\n\n    *****\n\n    - - -\n\n    ---------------------------------------\n   ~~删除线~~\n\nMarkdown 使用星号（*）和底线（_）作为标记强调字词的符号，被 * 或 _ 包围的字词会被转成用 <em> 标签包围，用两个 * 或 _ 包起来的话，则会被转成 <strong>，例如：\n*single asterisks*\n\n_single underscores_\n\n**double asterisks**\n\n__double underscores__\n\n如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：\n\n\\*this text is surrounded by literal asterisks\\*\n\n如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：\n\n``There is a literal backtick (`) here.`\n\n很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。\n\nMarkdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。\n\n行内式的图片语法看起来像是：\n\n![Alt text](/path/to/img.jpg)\n\n![Alt text](/path/to/img.jpg \"Optional title\")\n\n自动链接\n\nMarkdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：\n\n<http://example.com/>\n\n#反斜杠\n\nMarkdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 <em> 标签），你可以在星号的前面加上反斜杠：\n\n\\*literal asterisks\\*\n\n\n\nMarkdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n\n\\   反斜线\n`   反引号\n\\*   星号\n\\_   底线\n{}  花括号\n[]  方括号\n()  括弧\n\\#   井字号\n\\+   加号\n\\-   减号\n\\.   英文句点\n\\!   惊叹号\n\n以下是图片显示方法：\n```\n![cmd-markdown-logo](https://www.zybuluo.com/static/img/logo.png)\n```\n![cmd-markdown-logo](https://www.zybuluo.com/static/img/logo.png)\n#### 阅读模式\n\n在 **阅读工具栏** 点击 <i class=\"icon-desktop\"></i> 或者按下 `Ctrl+Alt+M` 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。\n\n\n\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: Markdown对应Yelee主题的一些语法\ndate: 2017-02-07 15:08:32\ndescription: \"Welcome to Nannan's blog! This is your very first post.\"\ncategories:\ntags:\n     - Mrakdown语法\n     - Yelee\n---\n<Excerpt in index | 首页摘要>\n<!-- more -->\n<The rest of contents | 余下全文>\n\n# 这是 H1 #\n\n## 这是 H2 ##\n\n### 这是 H3 ######\n\n###### 这是 H6 ######\n\nMarkdown 标记区块引用是使用类似 email 中用 > 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 >\n\n> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\n> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n>\n> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\n> id sem consectetuer libero luctus adipiscing.\n\n区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 > ：\n> This is the first level of quoting.\n>\n> > This is nested blockquote.\n>\n> Back to the first level.\n\n引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：\n\n> ## 这是一个标题。\n>\n> 1.   这是第一行列表项。\n> 2.   这是第二行列表项。\n>\n> 给出一些例子代码：\n>\n>     return shell_exec(\"echo $input | $markdown_script\");\n\n#列表\n\nMarkdown 支持有序列表和无序列表。\n\n无序列表使用星号、加号或是减号作为列表标记：\n\n*   Red\n*   Green\n*   Blue\n等于\n+   Red\n+   Green\n+   Blue\n也等于\n-   Red\n-   Green\n-   Blue\n有序列表则使用数字接着一个英文句点：\n1.  Bird\n2.  McHale\n3.  Parish\n\n很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：\n\n<ol>\n<li>Bird</li>\n<li>McHale</li>\n<li>Parish</li>\n</ol>\n\n列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。\n\n要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：\n\n\n*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\n    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\n    viverra nec, fringilla in, laoreet vitae, risus.\n*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\n    Suspendisse id sem consectetuer libero luctus adipiscing.\n\n*   A list item with a blockquote:\n\n    > This is a blockquote\n    > inside a list item.\n\n你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\n    * * *\n\n    ***\n\n    *****\n\n    - - -\n\n    ---------------------------------------\n   ~~删除线~~\n\nMarkdown 使用星号（*）和底线（_）作为标记强调字词的符号，被 * 或 _ 包围的字词会被转成用 <em> 标签包围，用两个 * 或 _ 包起来的话，则会被转成 <strong>，例如：\n*single asterisks*\n\n_single underscores_\n\n**double asterisks**\n\n__double underscores__\n\n如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：\n\n\\*this text is surrounded by literal asterisks\\*\n\n如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：\n\n``There is a literal backtick (`) here.`\n\n很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。\n\nMarkdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。\n\n行内式的图片语法看起来像是：\n\n![Alt text](/path/to/img.jpg)\n\n![Alt text](/path/to/img.jpg \"Optional title\")\n\n自动链接\n\nMarkdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：\n\n<http://example.com/>\n\n#反斜杠\n\nMarkdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 <em> 标签），你可以在星号的前面加上反斜杠：\n\n\\*literal asterisks\\*\n\n\n\nMarkdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n\n\\   反斜线\n`   反引号\n\\*   星号\n\\_   底线\n{}  花括号\n[]  方括号\n()  括弧\n\\#   井字号\n\\+   加号\n\\-   减号\n\\.   英文句点\n\\!   惊叹号\n\n以下是图片显示方法：\n```\n![cmd-markdown-logo](https://www.zybuluo.com/static/img/logo.png)\n```\n![cmd-markdown-logo](https://www.zybuluo.com/static/img/logo.png)\n#### 阅读模式\n\n在 **阅读工具栏** 点击 <i class=\"icon-desktop\"></i> 或者按下 `Ctrl+Alt+M` 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。\n\n\n\n\n","slug":"hello-world","published":1,"updated":"2017-02-10T07:32:48.394Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizewi5zo0001zwi4kxjjh54s","content":"<p><excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"><br><a id=\"more\"></a></excerpt></p>\n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"这是-H1\"><a href=\"#这是-H1\" class=\"headerlink\" title=\"这是 H1\"></a>这是 H1</h1><h2 id=\"这是-H2\"><a href=\"#这是-H2\" class=\"headerlink\" title=\"这是 H2\"></a>这是 H2</h2><h3 id=\"这是-H3\"><a href=\"#这是-H3\" class=\"headerlink\" title=\"这是 H3\"></a>这是 H3</h3><h6 id=\"这是-H6\"><a href=\"#这是-H6\" class=\"headerlink\" title=\"这是 H6\"></a>这是 H6</h6><p>Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt;</p>\n<blockquote>\n<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>\n<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.</p>\n</blockquote>\n<p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ：</p>\n<blockquote>\n<p>This is the first level of quoting.</p>\n<blockquote>\n<p>This is nested blockquote.</p>\n</blockquote>\n<p>Back to the first level.</p>\n</blockquote>\n<p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p>\n<blockquote>\n<h2 id=\"这是一个标题。\"><a href=\"#这是一个标题。\" class=\"headerlink\" title=\"这是一个标题。\"></a>这是一个标题。</h2><ol>\n<li>这是第一行列表项。</li>\n<li>这是第二行列表项。</li>\n</ol>\n<p>给出一些例子代码：</p>\n<pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);\n</code></pre></blockquote>\n<p>#列表</p>\n<p>Markdown 支持有序列表和无序列表。</p>\n<p>无序列表使用星号、加号或是减号作为列表标记：</p>\n<ul>\n<li>Red</li>\n<li>Green</li>\n<li>Blue<br>等于</li>\n</ul>\n<ul>\n<li>Red</li>\n<li>Green</li>\n<li>Blue<br>也等于</li>\n</ul>\n<ul>\n<li>Red</li>\n<li>Green</li>\n<li>Blue<br>有序列表则使用数字接着一个英文句点：</li>\n</ul>\n<ol>\n<li>Bird</li>\n<li>McHale</li>\n<li>Parish</li>\n</ol>\n<p>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：</p>\n<ol><br><li>Bird</li><br><li>McHale</li><br><li>Parish</li><br></ol>\n\n<p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p>\n<p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p>\n<ul>\n<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.<br>Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,<br>viverra nec, fringilla in, laoreet vitae, risus.</li>\n<li><p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.<br>Suspendisse id sem consectetuer libero luctus adipiscing.</p>\n</li>\n<li><p>A list item with a blockquote:</p>\n<blockquote>\n<p>This is a blockquote<br>inside a list item.</p>\n</blockquote>\n</li>\n</ul>\n<p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>\n<pre><code>* * *\n\n***\n\n*****\n\n- - -\n\n---------------------------------------\n</code></pre><p>   <del>删除线</del></p>\n<p>Markdown 使用星号（<em>）和底线（_）作为标记强调字词的符号，被 </em> 或 <em> 包围的字词会被转成用 <em> 标签包围，用两个 * 或 </em> 包起来的话，则会被转成 <strong>，例如：<br><em>single asterisks</em></strong></em></p>\n<p><em>single underscores</em></p>\n<p><strong>double asterisks</strong></p>\n<p><strong>double underscores</strong></p>\n<p>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</p>\n<p>*this text is surrounded by literal asterisks*</p>\n<p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</p>\n<p><code>`There is a literal backtick (</code>) here.`</p>\n<p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</p>\n<p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。</p>\n<p>行内式的图片语法看起来像是：</p>\n<p><img src=\"/path/to/img.jpg\" alt=\"Alt text\"></p>\n<p><img src=\"/path/to/img.jpg\" alt=\"Alt text\" title=\"Optional title\"></p>\n<p>自动链接</p>\n<p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p>\n<p><a href=\"http://example.com/\" target=\"_blank\" rel=\"external\">http://example.com/</a></p>\n<p>#反斜杠</p>\n<p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 <em> 标签），你可以在星号的前面加上反斜杠：</em></p>\n<p>*literal asterisks*</p>\n<p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>\n<p>\\   反斜线<br>`   反引号<br>*   星号<br>_   底线<br>{}  花括号<br>[]  方括号<br>()  括弧<br>#   井字号<br>+   加号<br>-   减号<br>.   英文句点<br>!   惊叹号</p>\n<p>以下是图片显示方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![cmd-markdown-logo](https://www.zybuluo.com/static/img/logo.png)</div></pre></td></tr></table></figure></p>\n<p><img src=\"https://www.zybuluo.com/static/img/logo.png\" alt=\"cmd-markdown-logo\"></p>\n<h4 id=\"阅读模式\"><a href=\"#阅读模式\" class=\"headerlink\" title=\"阅读模式\"></a>阅读模式</h4><p>在 <strong>阅读工具栏</strong> 点击 <i class=\"icon-desktop\"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p>\n</the>","excerpt":"<p><Excerpt in index | 首页摘要><br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h1 id=\"这是-H1\"><a href=\"#这是-H1\" class=\"headerlink\" title=\"这是 H1\"></a>这是 H1</h1><h2 id=\"这是-H2\"><a href=\"#这是-H2\" class=\"headerlink\" title=\"这是 H2\"></a>这是 H2</h2><h3 id=\"这是-H3\"><a href=\"#这是-H3\" class=\"headerlink\" title=\"这是 H3\"></a>这是 H3</h3><h6 id=\"这是-H6\"><a href=\"#这是-H6\" class=\"headerlink\" title=\"这是 H6\"></a>这是 H6</h6><p>Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt;</p>\n<blockquote>\n<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>\n<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.</p>\n</blockquote>\n<p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ：</p>\n<blockquote>\n<p>This is the first level of quoting.</p>\n<blockquote>\n<p>This is nested blockquote.</p>\n</blockquote>\n<p>Back to the first level.</p>\n</blockquote>\n<p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p>\n<blockquote>\n<h2 id=\"这是一个标题。\"><a href=\"#这是一个标题。\" class=\"headerlink\" title=\"这是一个标题。\"></a>这是一个标题。</h2><ol>\n<li>这是第一行列表项。</li>\n<li>这是第二行列表项。</li>\n</ol>\n<p>给出一些例子代码：</p>\n<pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);\n</code></pre></blockquote>\n<p>#列表</p>\n<p>Markdown 支持有序列表和无序列表。</p>\n<p>无序列表使用星号、加号或是减号作为列表标记：</p>\n<ul>\n<li>Red</li>\n<li>Green</li>\n<li>Blue<br>等于</li>\n</ul>\n<ul>\n<li>Red</li>\n<li>Green</li>\n<li>Blue<br>也等于</li>\n</ul>\n<ul>\n<li>Red</li>\n<li>Green</li>\n<li>Blue<br>有序列表则使用数字接着一个英文句点：</li>\n</ul>\n<ol>\n<li>Bird</li>\n<li>McHale</li>\n<li>Parish</li>\n</ol>\n<p>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：</p>\n<ol><br><li>Bird</li><br><li>McHale</li><br><li>Parish</li><br></ol>\n\n<p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p>\n<p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p>\n<ul>\n<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.<br>Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,<br>viverra nec, fringilla in, laoreet vitae, risus.</li>\n<li><p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.<br>Suspendisse id sem consectetuer libero luctus adipiscing.</p>\n</li>\n<li><p>A list item with a blockquote:</p>\n<blockquote>\n<p>This is a blockquote<br>inside a list item.</p>\n</blockquote>\n</li>\n</ul>\n<p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>\n<pre><code>* * *\n\n***\n\n*****\n\n- - -\n\n---------------------------------------\n</code></pre><p>   <del>删除线</del></p>\n<p>Markdown 使用星号（<em>）和底线（_）作为标记强调字词的符号，被 </em> 或 <em> 包围的字词会被转成用 <em> 标签包围，用两个 * 或 </em> 包起来的话，则会被转成 <strong>，例如：<br><em>single asterisks</em></p>\n<p><em>single underscores</em></p>\n<p><strong>double asterisks</strong></p>\n<p><strong>double underscores</strong></p>\n<p>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</p>\n<p>*this text is surrounded by literal asterisks*</p>\n<p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</p>\n<p><code>`There is a literal backtick (</code>) here.`</p>\n<p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</p>\n<p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。</p>\n<p>行内式的图片语法看起来像是：</p>\n<p><img src=\"/path/to/img.jpg\" alt=\"Alt text\"></p>\n<p><img src=\"/path/to/img.jpg\" alt=\"Alt text\" title=\"Optional title\"></p>\n<p>自动链接</p>\n<p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p>\n<p><a href=\"http://example.com/\">http://example.com/</a></p>\n<p>#反斜杠</p>\n<p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 <em> 标签），你可以在星号的前面加上反斜杠：</p>\n<p>*literal asterisks*</p>\n<p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>\n<p>\\   反斜线<br>`   反引号<br>*   星号<br>_   底线<br>{}  花括号<br>[]  方括号<br>()  括弧<br>#   井字号<br>+   加号<br>-   减号<br>.   英文句点<br>!   惊叹号</p>\n<p>以下是图片显示方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![cmd-markdown-logo](https://www.zybuluo.com/static/img/logo.png)</div></pre></td></tr></table></figure></p>\n<p><img src=\"https://www.zybuluo.com/static/img/logo.png\" alt=\"cmd-markdown-logo\"></p>\n<h4 id=\"阅读模式\"><a href=\"#阅读模式\" class=\"headerlink\" title=\"阅读模式\"></a>阅读模式</h4><p>在 <strong>阅读工具栏</strong> 点击 <i class=\"icon-desktop\"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p>"},{"title":"JavaScript 中对变量和函数声明的提前","date":"2017-02-09T03:52:32.000Z","description":"在聊函数声明的声明提前之前，有必要介绍下函数定义的几种方法，大部分小伙伴们应该都不陌生。了解的或者不想了解的就痛快地一滚轮滚下去吧，不熟悉的或者想再熟悉一下的就放慢脚步起步走。","fancybox":false,"_content":"<Excerpt in index | 首页摘要>\n<!-- more -->\n<The rest of contents | 余下全文>\n\n定义函数的方法主要有三种：\n1.函数声明(Function Declaration)\n2.函数表达式Function Expression)\n3.new Function构造函数\n函数声明的典型格式：\n```javascript\nfunction functionName(arg1, arg2, ...){\n  <!-- function body -->\n}\n```\n函数表达式：\n```\nvar variable=function(arg1, arg2, ...){\n      <!-- function body -->\n}\n```\n# 变量声明被提前\n其实是 JavaScript 解析器搞的鬼，解析器将当前作用域内声明的所有变量和函数都会放到作用域的开始处，但是，只有变量的声明被提前到作用域的开始处了，而赋值操作被保留在原处。上述代码对于解析器来说其实是如下这个样子滴：\n\n```javascript\n(function() {\n  var declaredLater; //声明被提前到作用域开始处了！\n\n  // Outputs: undefined\n  console.log(declaredLater);\n\n  declaredLater = \"Now it's defined!\"; //赋值操作还在原地!\n\n  // Outputs: \"Now it's defined!\"\n  console.log(declaredLater);\n})();\n```\n\n这就是为什么上述代码不报异常的原因！变量和函数经过“被提前”之后，declaredLater 变量其实就被放在了调用函数的前面，根据 JavaScript 语法的定义，已声明而未被赋值的变量会被自动赋值为 undefined ，所以，第一次打印 declaredLater 变量的值就是 undefined，后面我们对 declaredLater 变量进行了赋值操作，所以，第二次再打印变量就会输出Now it's defined!。\n\n再来看一个例子：\n```javascript\nvar name = \"Baggins\";\n\n(function () {\n    // Outputs: \"Original name was undefined\"\n    console.log(\"Original name was \" + name);\n\n    var name = \"Underhill\";\n\n    // Outputs: \"New name is Underhill\"\n    console.log(\"New name is \" + name);\n})();\n```\n上述代码中，我们先声明了一个变量 name ，我们的本意是希望在第一次打印 name 变量时能够输出全局范围内定义的 name 变量，然后再在函数中定义一个局部 name 变量覆盖全局变量，最后输出局部变量的值。可是第一次输出的结果和我们的预期完全不一致，原因就是我们定义的局部变量在其作用域内被“提前”了，也就是变成了如下形式：\n\n```javascript\nvar name = \"Baggins\";\n\n(function () {\n    var name;  //注意：name 变量被提前了！\n\n    // Outputs: \"Original name was undefined\"\n    console.log(\"Original name was \" + name);\n\n    name = \"Underhill\";\n\n    // Outputs: \"New name is Underhill\"\n    console.log(\"New name is \" + name);\n})();\n```\n# 函数声明“被提前”\n前边说的是变量，接下来我们说说函数。\n\n函数的“被提前”还要分两种情况，一种是函数声明，第二种是函数作为值赋值给变量。\n\n先说第一种情况，上代码：\n```javascript\n// Outputs: \"Yes!\"\nisItHoisted();\n\nfunction isItHoisted() {\n    console.log(\"Yes!\");\n}\n```\n再来看第二种情况：函数作为值赋值给变量。（还记得吗？在 JavaScript 中，函数也可以作为值赋予变量！）还是先上代码：\n```javascript\n// Outputs: \"Definition hoisted!\"\ndefinitionHoisted();\n\n// TypeError: undefined is not a function\ndefinitionNotHoisted();\n\nfunction definitionHoisted() {\n    console.log(\"Definition hoisted!\");\n}\n\nvar definitionNotHoisted = function () {\n    console.log(\"Definition not hoisted!\");\n};\n```\n我们做了一个对比，definitionHoisted 函数被妥妥的执行了，符合第一种类型；definitionNotHoisted 变量“被提前”了，但是他的赋值（也就是函数）并没有被提前，从这一点上来说，和前面我们所讲的变量“被提前”是完全一致的，并且，由于“被提前”的变量的默认值是 undefined ，所以报的错误属于“类型不匹配”，因为 undefined 不是函数，当然不能被调用。\n\n# 总结\n+ 变量的声明被提前到作用域顶部，赋值保留在原地\n+ 函数声明整个“被提前”\n+ 函数作为值赋给变量时只有变量“被提前”了，函数没有“被提前”\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/javascript内容.md","raw":"---\ntitle: JavaScript 中对变量和函数声明的提前\ndate: 2017-02-09 11:52:32\ndescription: \"在聊函数声明的声明提前之前，有必要介绍下函数定义的几种方法，大部分小伙伴们应该都不陌生。了解的或者不想了解的就痛快地一滚轮滚下去吧，不熟悉的或者想再熟悉一下的就放慢脚步起步走。\"\nfancybox: false\ncategories:\ntags:\n     - JavaScript\n     - 函数\n---\n<Excerpt in index | 首页摘要>\n<!-- more -->\n<The rest of contents | 余下全文>\n\n定义函数的方法主要有三种：\n1.函数声明(Function Declaration)\n2.函数表达式Function Expression)\n3.new Function构造函数\n函数声明的典型格式：\n```javascript\nfunction functionName(arg1, arg2, ...){\n  <!-- function body -->\n}\n```\n函数表达式：\n```\nvar variable=function(arg1, arg2, ...){\n      <!-- function body -->\n}\n```\n# 变量声明被提前\n其实是 JavaScript 解析器搞的鬼，解析器将当前作用域内声明的所有变量和函数都会放到作用域的开始处，但是，只有变量的声明被提前到作用域的开始处了，而赋值操作被保留在原处。上述代码对于解析器来说其实是如下这个样子滴：\n\n```javascript\n(function() {\n  var declaredLater; //声明被提前到作用域开始处了！\n\n  // Outputs: undefined\n  console.log(declaredLater);\n\n  declaredLater = \"Now it's defined!\"; //赋值操作还在原地!\n\n  // Outputs: \"Now it's defined!\"\n  console.log(declaredLater);\n})();\n```\n\n这就是为什么上述代码不报异常的原因！变量和函数经过“被提前”之后，declaredLater 变量其实就被放在了调用函数的前面，根据 JavaScript 语法的定义，已声明而未被赋值的变量会被自动赋值为 undefined ，所以，第一次打印 declaredLater 变量的值就是 undefined，后面我们对 declaredLater 变量进行了赋值操作，所以，第二次再打印变量就会输出Now it's defined!。\n\n再来看一个例子：\n```javascript\nvar name = \"Baggins\";\n\n(function () {\n    // Outputs: \"Original name was undefined\"\n    console.log(\"Original name was \" + name);\n\n    var name = \"Underhill\";\n\n    // Outputs: \"New name is Underhill\"\n    console.log(\"New name is \" + name);\n})();\n```\n上述代码中，我们先声明了一个变量 name ，我们的本意是希望在第一次打印 name 变量时能够输出全局范围内定义的 name 变量，然后再在函数中定义一个局部 name 变量覆盖全局变量，最后输出局部变量的值。可是第一次输出的结果和我们的预期完全不一致，原因就是我们定义的局部变量在其作用域内被“提前”了，也就是变成了如下形式：\n\n```javascript\nvar name = \"Baggins\";\n\n(function () {\n    var name;  //注意：name 变量被提前了！\n\n    // Outputs: \"Original name was undefined\"\n    console.log(\"Original name was \" + name);\n\n    name = \"Underhill\";\n\n    // Outputs: \"New name is Underhill\"\n    console.log(\"New name is \" + name);\n})();\n```\n# 函数声明“被提前”\n前边说的是变量，接下来我们说说函数。\n\n函数的“被提前”还要分两种情况，一种是函数声明，第二种是函数作为值赋值给变量。\n\n先说第一种情况，上代码：\n```javascript\n// Outputs: \"Yes!\"\nisItHoisted();\n\nfunction isItHoisted() {\n    console.log(\"Yes!\");\n}\n```\n再来看第二种情况：函数作为值赋值给变量。（还记得吗？在 JavaScript 中，函数也可以作为值赋予变量！）还是先上代码：\n```javascript\n// Outputs: \"Definition hoisted!\"\ndefinitionHoisted();\n\n// TypeError: undefined is not a function\ndefinitionNotHoisted();\n\nfunction definitionHoisted() {\n    console.log(\"Definition hoisted!\");\n}\n\nvar definitionNotHoisted = function () {\n    console.log(\"Definition not hoisted!\");\n};\n```\n我们做了一个对比，definitionHoisted 函数被妥妥的执行了，符合第一种类型；definitionNotHoisted 变量“被提前”了，但是他的赋值（也就是函数）并没有被提前，从这一点上来说，和前面我们所讲的变量“被提前”是完全一致的，并且，由于“被提前”的变量的默认值是 undefined ，所以报的错误属于“类型不匹配”，因为 undefined 不是函数，当然不能被调用。\n\n# 总结\n+ 变量的声明被提前到作用域顶部，赋值保留在原地\n+ 函数声明整个“被提前”\n+ 函数作为值赋给变量时只有变量“被提前”了，函数没有“被提前”\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"javascript内容","published":1,"updated":"2017-02-09T08:15:05.440Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizewi5zv0003zwi4xyq0foja","content":"<p><excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"><br><a id=\"more\"></a></excerpt></p>\n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<p>定义函数的方法主要有三种：<br>1.函数声明(Function Declaration)<br>2.函数表达式Function Expression)<br>3.new Function构造函数<br>函数声明的典型格式：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">functionName</span>(<span class=\"params\">arg1, arg2, ...</span>)</span>&#123;</div><div class=\"line\">  &lt;!-- <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">body</span> --&gt;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>函数表达式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var variable=function(arg1, arg2, ...)&#123;</div><div class=\"line\">      &lt;!-- function body --&gt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"变量声明被提前\"><a href=\"#变量声明被提前\" class=\"headerlink\" title=\"变量声明被提前\"></a>变量声明被提前</h1><p>其实是 JavaScript 解析器搞的鬼，解析器将当前作用域内声明的所有变量和函数都会放到作用域的开始处，但是，只有变量的声明被提前到作用域的开始处了，而赋值操作被保留在原处。上述代码对于解析器来说其实是如下这个样子滴：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> declaredLater; <span class=\"comment\">//声明被提前到作用域开始处了！</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Outputs: undefined</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(declaredLater);</div><div class=\"line\"></div><div class=\"line\">  declaredLater = <span class=\"string\">\"Now it's defined!\"</span>; <span class=\"comment\">//赋值操作还在原地!</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Outputs: \"Now it's defined!\"</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(declaredLater);</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>这就是为什么上述代码不报异常的原因！变量和函数经过“被提前”之后，declaredLater 变量其实就被放在了调用函数的前面，根据 JavaScript 语法的定义，已声明而未被赋值的变量会被自动赋值为 undefined ，所以，第一次打印 declaredLater 变量的值就是 undefined，后面我们对 declaredLater 变量进行了赋值操作，所以，第二次再打印变量就会输出Now it’s defined!。</p>\n<p>再来看一个例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"Baggins\"</span>;</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Outputs: \"Original name was undefined\"</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Original name was \"</span> + name);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">\"Underhill\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Outputs: \"New name is Underhill\"</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"New name is \"</span> + name);</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>上述代码中，我们先声明了一个变量 name ，我们的本意是希望在第一次打印 name 变量时能够输出全局范围内定义的 name 变量，然后再在函数中定义一个局部 name 变量覆盖全局变量，最后输出局部变量的值。可是第一次输出的结果和我们的预期完全不一致，原因就是我们定义的局部变量在其作用域内被“提前”了，也就是变成了如下形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"Baggins\"</span>;</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name;  <span class=\"comment\">//注意：name 变量被提前了！</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Outputs: \"Original name was undefined\"</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Original name was \"</span> + name);</div><div class=\"line\"></div><div class=\"line\">    name = <span class=\"string\">\"Underhill\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Outputs: \"New name is Underhill\"</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"New name is \"</span> + name);</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<h1 id=\"函数声明“被提前”\"><a href=\"#函数声明“被提前”\" class=\"headerlink\" title=\"函数声明“被提前”\"></a>函数声明“被提前”</h1><p>前边说的是变量，接下来我们说说函数。</p>\n<p>函数的“被提前”还要分两种情况，一种是函数声明，第二种是函数作为值赋值给变量。</p>\n<p>先说第一种情况，上代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Outputs: \"Yes!\"</span></div><div class=\"line\">isItHoisted();</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isItHoisted</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Yes!\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>再来看第二种情况：函数作为值赋值给变量。（还记得吗？在 JavaScript 中，函数也可以作为值赋予变量！）还是先上代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Outputs: \"Definition hoisted!\"</span></div><div class=\"line\">definitionHoisted();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// TypeError: undefined is not a function</span></div><div class=\"line\">definitionNotHoisted();</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">definitionHoisted</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Definition hoisted!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> definitionNotHoisted = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Definition not hoisted!\"</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>我们做了一个对比，definitionHoisted 函数被妥妥的执行了，符合第一种类型；definitionNotHoisted 变量“被提前”了，但是他的赋值（也就是函数）并没有被提前，从这一点上来说，和前面我们所讲的变量“被提前”是完全一致的，并且，由于“被提前”的变量的默认值是 undefined ，所以报的错误属于“类型不匹配”，因为 undefined 不是函数，当然不能被调用。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>变量的声明被提前到作用域顶部，赋值保留在原地</li>\n<li>函数声明整个“被提前”</li>\n<li>函数作为值赋给变量时只有变量“被提前”了，函数没有“被提前”</li>\n</ul>\n</the>","excerpt":"<p><Excerpt in index | 首页摘要><br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<p>定义函数的方法主要有三种：<br>1.函数声明(Function Declaration)<br>2.函数表达式Function Expression)<br>3.new Function构造函数<br>函数声明的典型格式：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">functionName</span>(<span class=\"params\">arg1, arg2, ...</span>)</span>&#123;</div><div class=\"line\">  &lt;!-- <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">body</span> --&gt;</div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure></p>\n<p>函数表达式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var variable=function(arg1, arg2, ...)&#123;</div><div class=\"line\">      &lt;!-- function body --&gt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"变量声明被提前\"><a href=\"#变量声明被提前\" class=\"headerlink\" title=\"变量声明被提前\"></a>变量声明被提前</h1><p>其实是 JavaScript 解析器搞的鬼，解析器将当前作用域内声明的所有变量和函数都会放到作用域的开始处，但是，只有变量的声明被提前到作用域的开始处了，而赋值操作被保留在原处。上述代码对于解析器来说其实是如下这个样子滴：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> declaredLater; <span class=\"comment\">//声明被提前到作用域开始处了！</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Outputs: undefined</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(declaredLater);</div><div class=\"line\"></div><div class=\"line\">  declaredLater = <span class=\"string\">\"Now it's defined!\"</span>; <span class=\"comment\">//赋值操作还在原地!</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Outputs: \"Now it's defined!\"</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(declaredLater);</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>这就是为什么上述代码不报异常的原因！变量和函数经过“被提前”之后，declaredLater 变量其实就被放在了调用函数的前面，根据 JavaScript 语法的定义，已声明而未被赋值的变量会被自动赋值为 undefined ，所以，第一次打印 declaredLater 变量的值就是 undefined，后面我们对 declaredLater 变量进行了赋值操作，所以，第二次再打印变量就会输出Now it’s defined!。</p>\n<p>再来看一个例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"Baggins\"</span>;</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Outputs: \"Original name was undefined\"</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Original name was \"</span> + name);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">\"Underhill\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Outputs: \"New name is Underhill\"</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"New name is \"</span> + name);</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>上述代码中，我们先声明了一个变量 name ，我们的本意是希望在第一次打印 name 变量时能够输出全局范围内定义的 name 变量，然后再在函数中定义一个局部 name 变量覆盖全局变量，最后输出局部变量的值。可是第一次输出的结果和我们的预期完全不一致，原因就是我们定义的局部变量在其作用域内被“提前”了，也就是变成了如下形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"Baggins\"</span>;</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name;  <span class=\"comment\">//注意：name 变量被提前了！</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Outputs: \"Original name was undefined\"</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Original name was \"</span> + name);</div><div class=\"line\"></div><div class=\"line\">    name = <span class=\"string\">\"Underhill\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Outputs: \"New name is Underhill\"</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"New name is \"</span> + name);</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<h1 id=\"函数声明“被提前”\"><a href=\"#函数声明“被提前”\" class=\"headerlink\" title=\"函数声明“被提前”\"></a>函数声明“被提前”</h1><p>前边说的是变量，接下来我们说说函数。</p>\n<p>函数的“被提前”还要分两种情况，一种是函数声明，第二种是函数作为值赋值给变量。</p>\n<p>先说第一种情况，上代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Outputs: \"Yes!\"</span></div><div class=\"line\">isItHoisted();</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isItHoisted</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Yes!\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>再来看第二种情况：函数作为值赋值给变量。（还记得吗？在 JavaScript 中，函数也可以作为值赋予变量！）还是先上代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Outputs: \"Definition hoisted!\"</span></div><div class=\"line\">definitionHoisted();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// TypeError: undefined is not a function</span></div><div class=\"line\">definitionNotHoisted();</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">definitionHoisted</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Definition hoisted!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> definitionNotHoisted = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Definition not hoisted!\"</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>我们做了一个对比，definitionHoisted 函数被妥妥的执行了，符合第一种类型；definitionNotHoisted 变量“被提前”了，但是他的赋值（也就是函数）并没有被提前，从这一点上来说，和前面我们所讲的变量“被提前”是完全一致的，并且，由于“被提前”的变量的默认值是 undefined ，所以报的错误属于“类型不匹配”，因为 undefined 不是函数，当然不能被调用。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>变量的声明被提前到作用域顶部，赋值保留在原地</li>\n<li>函数声明整个“被提前”</li>\n<li>函数作为值赋给变量时只有变量“被提前”了，函数没有“被提前”</li>\n</ul>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cizewi5zo0001zwi4kxjjh54s","tag_id":"cizewi5zy0004zwi4ztm0zd0n","_id":"cizewi6060008zwi4ngavya4j"},{"post_id":"cizewi5zo0001zwi4kxjjh54s","tag_id":"cizewi6040006zwi4bi00nx14","_id":"cizewi6060009zwi4caekvq52"},{"post_id":"cizewi5zv0003zwi4xyq0foja","tag_id":"cizewi6050007zwi4mxnnjs5w","_id":"cizewi607000bzwi4hqwvp2qd"},{"post_id":"cizewi5zv0003zwi4xyq0foja","tag_id":"cizewi607000azwi4ezvdwp85","_id":"cizewi608000czwi4wk3dbc7q"}],"Tag":[{"name":"Mrakdown语法","_id":"cizewi5zy0004zwi4ztm0zd0n"},{"name":"Yelee","_id":"cizewi6040006zwi4bi00nx14"},{"name":"JavaScript","_id":"cizewi6050007zwi4mxnnjs5w"},{"name":"函数","_id":"cizewi607000azwi4ezvdwp85"}]}}